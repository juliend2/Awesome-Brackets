#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 146)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    28,    28,    28,    40,    31,    21,    31,    35,    35,    22,
    27,    27,    27,    48,    43,    35,    49,    61,    54,     5,
    31,     9,    11,    50,    13,    15,    17,    19,     1,     3,
     6,     5,    31,     9,    11,    52,    13,    15,    17,    19,
     1,     3,     6,     5,    38,     9,    11,    31,    13,    15,
    17,    19,     1,     3,     6,     5,    30,     9,    11,    35,
    13,    15,    17,    19,     1,     3,     6,     5,    57,     9,
    11,    26,    13,    15,    17,    19,     1,     3,     6,     5,
    25,     9,    11,    31,    13,    15,    17,    19,     1,     3,
     6,     5,    24,     9,    11,    47,    13,    15,    17,    19,
     1,     3,     6,     5,    35,     9,    11,    35,    13,    15,
    17,    19,     1,     3,     6,     5,    64,     9,    11,    31,
    13,    15,    17,    19,     1,     3,     6,     5,   nil,     9,
    11,   nil,    13,    15,    17,    19,     1,     3,     6,    58,
    44,    59,    45,    65,   nil,    45 ]

racc_action_check = [
    55,    46,    10,    26,    23,     3,    33,    23,    26,     3,
    55,    46,    10,    36,    31,    30,    36,    55,    46,    29,
    37,    29,    29,    40,    29,    29,    29,    29,    29,    29,
    29,     0,    41,     0,     0,    43,     0,     0,     0,     0,
     0,     0,     0,    52,    25,    52,    52,    12,    52,    52,
    52,    52,    52,    52,    52,     5,    11,     5,     5,    48,
     5,     5,     5,     5,     5,     5,     5,    45,    49,    45,
    45,     9,    45,    45,    45,    45,    45,    45,    45,    47,
     8,    47,    47,    53,    47,    47,    47,    47,    47,    47,
    47,    35,     6,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    24,    57,    24,    24,    58,    24,    24,
    24,    24,    24,    24,    24,    22,    59,    22,    22,    34,
    22,    22,    22,    22,    22,    22,    22,    21,   nil,    21,
    21,   nil,    21,    21,    21,    21,    21,    21,    21,    51,
    32,    51,    32,    60,   nil,    60 ]

racc_action_pointer = [
    29,   nil,   nil,   -12,   nil,    53,    71,   nil,    80,    59,
    -4,    43,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   125,   113,   -15,   101,    44,   -14,   nil,   nil,    17,
    -7,     2,   122,   -13,   100,    89,    10,     1,   nil,   nil,
    11,    13,   nil,    18,   nil,    65,    -5,    77,    37,    65,
   nil,   121,    41,    64,   nil,    -6,   nil,    82,    85,   104,
   125,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -19,   -10,   -20,   -11,   -41,   -27,   -12,   -41,   -41,
    -2,   -41,    -3,   -15,    -6,   -16,    -7,   -17,    -8,   -18,
    -9,   -24,   -41,   -41,   -41,   -41,   -41,   -14,   -13,    -5,
   -41,   -41,   -41,   -25,   -28,   -41,   -36,   -29,    66,   -30,
   -32,    -4,   -35,   -22,   -21,   -41,   -41,   -41,   -41,   -41,
   -33,   -41,   -24,   -26,   -39,   -41,   -38,   -41,   -41,   -41,
   -41,   -40,   -37,   -31,   -34,   -23 ]

racc_goto_table = [
    23,    10,    32,    36,     8,    51,    39,   nil,   nil,   nil,
    42,   nil,   nil,   nil,   nil,   nil,    33,    34,   nil,    37,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,    56,   nil,
   nil,   nil,   nil,    60,   nil,   nil,    46,    62,    63,   nil,
    53,   nil,   nil,   nil,   nil,   nil,   nil,    33,    55 ]

racc_goto_check = [
     3,     2,    12,    13,     1,    14,    13,   nil,   nil,   nil,
    13,   nil,   nil,   nil,   nil,   nil,     3,     3,   nil,     3,
   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,    13,   nil,
   nil,   nil,   nil,    12,   nil,   nil,     2,    13,    13,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,     3,     2 ]

racc_goto_pointer = [
   nil,     4,     1,    -5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -19,   -20,   -35 ]

racc_goto_default = [
   nil,   nil,   nil,    12,    29,    14,    16,    18,    20,     2,
     4,     7,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 25, :_reduce_1,
  1, 25, :_reduce_2,
  1, 26, :_reduce_3,
  3, 26, :_reduce_4,
  2, 26, :_reduce_5,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_15,
  1, 29, :_reduce_16,
  1, 29, :_reduce_17,
  1, 29, :_reduce_18,
  1, 29, :_reduce_19,
  1, 30, :_reduce_20,
  4, 30, :_reduce_21,
  3, 30, :_reduce_22,
  6, 30, :_reduce_23,
  0, 36, :_reduce_24,
  1, 36, :_reduce_25,
  3, 36, :_reduce_26,
  1, 31, :_reduce_27,
  3, 32, :_reduce_28,
  3, 32, :_reduce_29,
  3, 33, :_reduce_30,
  6, 33, :_reduce_31,
  0, 38, :_reduce_32,
  1, 38, :_reduce_33,
  3, 38, :_reduce_34,
  3, 34, :_reduce_35,
  3, 35, :_reduce_36,
  6, 35, :_reduce_37,
  5, 35, :_reduce_38,
  3, 37, :_reduce_39,
  4, 37, :_reduce_40 ]

racc_reduce_n = 41

racc_shift_n = 66

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "(" => 17,
  ")" => 18,
  "." => 19,
  "," => 20,
  "=" => 21,
  "{" => 22,
  "}" => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_20(val, _values, result)
     result = CallNode.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_21(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_22(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_24(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_25(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_27(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_28(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_29(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_30(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_33(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_34(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_35(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_36(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_37(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_38(val, _values, result)
     result = IfNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_39(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_40(val, _values, result)
     result = val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
